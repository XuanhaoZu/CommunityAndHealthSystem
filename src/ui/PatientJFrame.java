/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package ui;

import java.awt.Cursor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.AllSystem;
import model.Appointment;
import model.City;
import model.Community;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.EncounterDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.House;
import model.Patient;
import model.Person;

/**
 *
 * @author evelynzu
 */


public class PatientJFrame extends javax.swing.JFrame {
    SimpleDateFormat formatter;
    Doctor selectedDoctor;
    Appointment selectedAppointment;
    
    ArrayList<City> cities = AllSystem.cities;
    ArrayList<Community> communities;
    ArrayList<Hospital> hospitals;
   
    TableRowSorter apptableRowSorter;
    DefaultTableModel appointmentModel;
    
    TableRowSorter histableRowSorter;
    DefaultTableModel historyModel;


    static Patient currentPatient;
    public PatientJFrame(Patient patient) {
        this.currentPatient = patient;
//        System.out.println("current:"+currentPatient);
    
    
    initComponents();
    lbLogout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    lbUser.setText(patient.getPerson().getName());

    
    
    populateTableAppointment();
    apptableRowSorter = new TableRowSorter(appointmentModel);
 tblAppointment.setRowSorter(apptableRowSorter);

    
    
    populateHistoryTable();
    histableRowSorter = new TableRowSorter(historyModel);
 tblEncounter.setRowSorter(histableRowSorter);

    

        
//        doctorDirectory1 = new DoctorDirectory();
//        doctorDirectory1.addNewDoctor(doctor1);
//        doctorDirectory1.addNewDoctor(doctor2);
//        communities.add(community1);
//        hospitalDirectory1.addNewHospital(hospital1);
//        cities.add(boston);
        
//        System.out.print(cities.get(0).getCommunities().get(0).getHospitalDirectory().getHospitalDirectory().get(0).getDoctorDirectory().getDoctorDirectory().get(0).getName());
//        
//          System.out.print(communities.get(0).getHospitalDirectory());

        
        
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbLogout = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbCity = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cbCommunity = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cbHospital = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnCity = new javax.swing.JButton();
        btnCommunity = new javax.swing.JButton();
        btnHospital = new javax.swing.JButton();
        dateChooser = new com.toedter.calendar.JDateChooser();
        cbTime = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lbEncounter = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblEncounter = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        lbencountertime = new javax.swing.JLabel();
        lbEncounterBloodPressure = new javax.swing.JLabel();
        lbEncounterHeartrate = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        lbAppointDate = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lbAppointmentDoctor = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbAppointmentChecked = new javax.swing.JLabel();
        tfSearchAppo = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        tfSearchHis = new javax.swing.JTextField();
        lbUser = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(189, 212, 231));

        lbLogout.setText("Logout");
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(189, 212, 231));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel1.setText("City");

        cbCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cbCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "boston", "Item 2", "Item 3", "Item 4" }));
        cbCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCityActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel2.setText("Community");

        cbCommunity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cbCommunity.setAutoscrolls(true);

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setText("Hospital");

        cbHospital.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setText("Doctor");

        btnCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnCity.setText("Search");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnCommunity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnCommunity.setText("Search");
        btnCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCommunityActionPerformed(evt);
            }
        });

        btnHospital.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnHospital.setText("Search");
        btnHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHospitalActionPerformed(evt);
            }
        });

        cbTime.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        cbTime.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10:00", "11:00", "14:00", "15:00", "16:00", "17:00" }));

        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton1.setText("Make appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Doctor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDoctor);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cbCommunity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(63, 63, 63)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCommunity)
                            .addComponent(btnHospital)
                            .addComponent(btnCity)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113)
                        .addComponent(jButton1)))
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCity))
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCommunity))
                .addGap(75, 75, 75)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHospital))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1))
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(288, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Make new appointment", jPanel1);

        jPanel3.setBackground(new java.awt.Color(189, 212, 231));

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel5.setText("Timestamp:");

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel6.setText("Blood pressure:");

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setText("Encounter:");

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setText("Heart rate:");

        lbEncounter.setEditable(false);
        lbEncounter.setBackground(new java.awt.Color(189, 212, 231));
        lbEncounter.setColumns(20);
        lbEncounter.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        lbEncounter.setLineWrap(true);
        lbEncounter.setRows(5);
        jScrollPane4.setViewportView(lbEncounter);

        tblEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Time", "Bloodpressure", "Heartrate", "Encounter"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEncounter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEncounterMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblEncounter);

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Date&Time", "Checked by doctor?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblAppointment);

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton2.setText("Cancel appointment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lbAppointDate.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel10.setText("Doctor:");

        jLabel11.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel11.setText("Date & Time:");

        lbAppointmentDoctor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel12.setText("Checked by doctor?");

        lbAppointmentChecked.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        tfSearchAppo.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        tfSearchHis.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbEncounterBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbEncounterHeartrate, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbencountertime, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButton4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfSearchHis, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfSearchAppo, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(173, 173, 173))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel10)))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(jLabel12)))
                                .addGap(42, 42, 42)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbAppointmentChecked, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbAppointDate, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lbAppointmentDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addGap(125, 125, 125)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(tfSearchAppo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(lbAppointmentDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbAppointDate, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(lbAppointmentChecked, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(tfSearchHis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(lbencountertime, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(lbEncounterBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(lbEncounterHeartrate, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(281, 281, 281))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(265, 265, 265))))
        );

        jTabbedPane1.addTab("History", jPanel3);

        lbUser.setText("patient");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lbUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbLogout)
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbLogout)
                    .addComponent(lbUser))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 903, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
       
        String cityText = String.valueOf(cbCity.getSelectedItem());
//        System.out.print(cities.get(0).getName());
        
        for (City city: cities) {
            
            if (cityText.equals(city.getName())){
//                System.out.print(cityText+city.getName());
                communities= city.getCommunities();
                String[] array = new String[communities.size()];
                for(int i = 0; i < array.length; i++) {
                    array[i] = communities.get(i).getAddress();
                }
//                        System.out.print(array[0]);

                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( array);
                cbCommunity.setModel( model );      
//                cbCommunity = new JComboBox(array);
//                cbCommunity.setModel(new DefaultComboBoxModel<String>(communities.toArray(new String[0])));
            }
            
        }
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCommunityActionPerformed
        String communityText = String.valueOf(cbCommunity.getSelectedItem());
        System.out.println("community:"+communityText);
        
//        System.out.print(communities.get(0).getHospitalDirectory().getHospitalDirectory().get(0).getName());
//        System.out.println(communityText+communities.get(0).getAddress());
        try{for(Community community: communities) {
            if (communityText.equals(community.getAddress())) {
                
                hospitals = community.getHospitalDirectory().getHospitalDirectory();
                String[] array = new String[hospitals.size()];
                for(int i = 0; i < array.length; i++) {
                    array[i] = hospitals.get(i).getName();
//                    System.out.print(array[i]);
                }
                
                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( array);
                cbHospital.setModel( model );
            }
        }
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Please choose a community");
        }
    }//GEN-LAST:event_btnCommunityActionPerformed

    private void btnHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHospitalActionPerformed
        try{
            String hospitalText = String.valueOf(cbHospital.getSelectedItem());
        
        for(Hospital hospital: hospitals) {
            if(hospitalText.equals(hospital.getName())) {
                populateDoctorTable(hospital);
                
                

            }
        }
    }catch(Exception e){
        JOptionPane.showMessageDialog(this, "Please choose a hospital");
    }
    }//GEN-LAST:event_btnHospitalActionPerformed

    private void cbCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCityActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try{
            
        //check the whether the date is after tody
        Date dateChooserDate = dateChooser.getDate();
        Date currentDate = new Date();  
        if(dateChooserDate.before(currentDate)) {
            JOptionPane.showMessageDialog(this, "You should choose a date after today");
        } else{
        
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        String date = formatter.format(dateChooser.getDate());
//        System.out.println(formatter.format(date));
        String time = String.valueOf(cbTime.getSelectedItem());
        String dateAndTime = date + " " + time;
        Date appointmentDate = null;
        try {
            appointmentDate = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(dateAndTime);
//             System.out.println(appointmentDate);
        } catch (ParseException ex) {
            Logger.getLogger(PatientJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        Appointment appointment = new Appointment(appointmentDate, selectedDoctor, currentPatient, false);
        
        AllSystem.appointments.add(appointment);
        populateTableAppointment();
        JOptionPane.showMessageDialog(this, "Appointment maked!");
        System.out.println("set:"+AllSystem.appointments.size());}
        } catch(Exception e){JOptionPane.showMessageDialog(this, "Please check all input");}
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tblDoctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorMouseClicked
       int selectedRowIndex = tblDoctor.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        selectedDoctor = (Doctor)model.getValueAt(selectedRowIndex, 0);
       
    }//GEN-LAST:event_tblDoctorMouseClicked

    private void tblEncounterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEncounterMouseClicked
        int selectedRow = tblEncounter.getSelectedRow();
       
        Encounter selectedEncounter = (Encounter)historyModel.getValueAt(tblEncounter.convertRowIndexToModel(selectedRow), 0);
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        lbencountertime.setText(formatter.format(selectedEncounter.getTimestamp()));
        lbEncounterBloodPressure.setText(selectedEncounter.getVitalSigns().getBloodPressure());
        lbEncounterHeartrate.setText(selectedEncounter.getVitalSigns().getHeartRate());
        lbEncounter.setText(selectedEncounter.getEncounterText());
    }//GEN-LAST:event_tblEncounterMouseClicked

    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
        int selectedRow = tblAppointment.getSelectedRow();
       
        selectedAppointment = (Appointment)appointmentModel.getValueAt(tblAppointment.convertRowIndexToModel(selectedRow), 0);
        lbAppointmentDoctor.setText(selectedAppointment.getDoctor().getPerson().getName());
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        lbAppointDate.setText(formatter.format(selectedAppointment.getDate()));
        if (selectedAppointment.isState() == true){
            lbAppointmentChecked.setText("checked");
        } else {
            lbAppointmentChecked.setText("unchecked");
        }
        
        
        
    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseClicked
        LoginJframe loginJframe = new LoginJframe();
        loginJframe.setVisible(true);
        super.dispose();
    }//GEN-LAST:event_lbLogoutMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        AllSystem.appointments.remove(selectedAppointment);
        populateTableAppointment();
       JOptionPane.showMessageDialog(this, "Appointment canceled");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String text = tfSearchAppo.getText();
        if (text.trim().length() == 0) {
     apptableRowSorter.setRowFilter(null);
  } else {
     apptableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblAppointment.getRowSorter();

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
       String text = tfSearchHis.getText();
        if (text.trim().length() == 0) {
     histableRowSorter.setRowFilter(null);
  } else {
     histableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblEncounter.getRowSorter();

    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientJFrame(currentPatient).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnCommunity;
    private javax.swing.JButton btnHospital;
    private javax.swing.JComboBox<String> cbCity;
    private javax.swing.JComboBox<String> cbCommunity;
    private javax.swing.JComboBox<String> cbHospital;
    private javax.swing.JComboBox<String> cbTime;
    private com.toedter.calendar.JDateChooser dateChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lbAppointDate;
    private javax.swing.JLabel lbAppointmentChecked;
    private javax.swing.JLabel lbAppointmentDoctor;
    private javax.swing.JTextArea lbEncounter;
    private javax.swing.JLabel lbEncounterBloodPressure;
    private javax.swing.JLabel lbEncounterHeartrate;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JLabel lbUser;
    private javax.swing.JLabel lbencountertime;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblEncounter;
    private javax.swing.JTextField tfSearchAppo;
    private javax.swing.JTextField tfSearchHis;
    // End of variables declaration//GEN-END:variables
private void populateDoctorTable(Hospital hospital) {
       DefaultTableModel model = (DefaultTableModel)tblDoctor.getModel();
       model.setRowCount(0);
       for(Doctor doctor: hospital.getDoctorDirectory().getDoctorDirectory()){
           Object[] row = new Object[1];
           row[0] = doctor;
      
           model.addRow(row);
       }
    }


private void populateHistoryTable() {
        historyModel = (DefaultTableModel) tblEncounter.getModel();
        historyModel.setRowCount(0);
       
        for (Encounter encounter : currentPatient.getEncounterDirectory().getEncounterDirectory()) {
            Object[] row = new Object[4];
            row[0] = encounter;
            
            row[1] = encounter.getVitalSigns().getBloodPressure();
            row[2] = encounter.getVitalSigns().getHeartRate();
            row[3] = encounter.getEncounterText();
            historyModel.addRow(row);
        
    }
    }

private void populateTableAppointment() {

    appointmentModel = (DefaultTableModel)tblAppointment.getModel();
    appointmentModel.setRowCount(0);
    for(Appointment appointment : AllSystem.appointments){
        
        if(appointment.getPatient() == currentPatient){
            Object[] row = new Object[3];
            row[0] = appointment;
            formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            row[1] = formatter.format(appointment.getDate());
            row[2] = appointment.isState();
            appointmentModel.addRow(row);
        }
    }
    
}




}
