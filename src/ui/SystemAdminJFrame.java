/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import java.awt.Cursor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.AllSystem;
import static model.AllSystem.cities;
import model.Appointment;
import model.City;
import model.Community;
import model.CommunityAdmin;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.EncounterDirectory;
import model.Hospital;
import model.HospitalDirectory;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.VitalSigns;



/**
 *
 * @author evelynzu
 */
public class SystemAdminJFrame extends javax.swing.JFrame {

    private City selectedCity;
    private Community selectedCommunity;
    private House selectedHouse;
//    private City cbSelectedCity;
//    private Community cbSelectedCommunity;
    private ArrayList<Community> communities;
    private Person selectedPerson;
    private Hospital selectedHospital;
    private Doctor selectedDoctor;
    private Patient selectedPatient;
    private Appointment selectedAppointment;
    private Encounter selectedEncounter;
    private Person selectedUser;
    
    DefaultTableModel communityModel;
    TableRowSorter communityTableRowSorter;
    
    DefaultTableModel houeseModel;
TableRowSorter houseRowSorter;

DefaultTableModel personmodel;
TableRowSorter personTableRowSorter;

DefaultTableModel hospitalModel;
TableRowSorter hospitalTableRowSorter;

DefaultTableModel modelDoctor;
TableRowSorter tableRowSorterDocor;

DefaultTableModel modelPatient;
TableRowSorter tableRowSorterPatient;

DefaultTableModel modelAppointment;
TableRowSorter tableRowSorterAppointment;

DefaultTableModel modelEncounter;
TableRowSorter tableRowSorterEncounter;

DefaultTableModel modelAllPerson;
TableRowSorter tableRowSorterAllPerson;
    
    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
    /**
     * Creates new form SystemAdminJFrame
     */
    public SystemAdminJFrame() {
        initComponents();
                lbLogout.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                lbGotoHouse.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
                lbGoToHospital.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        populateCityList();
        
        populatePatientTable();
        
        tableRowSorterPatient = new TableRowSorter(modelPatient);
        tblPatient.setRowSorter(tableRowSorterPatient);


        populateAllPersonTable();
        tableRowSorterAllPerson = new TableRowSorter(modelAllPerson);
 tableAllPerson.setRowSorter(tableRowSorterAllPerson);
 
 dcDOB.setDate(new Date());
        
//        setComboboxCity();
//        setComboboxCommunity(selectedCity);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCommunity = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblCity = new javax.swing.JTable();
        tfCity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnEditCity = new javax.swing.JButton();
        btnDeleteCity = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tfAddress = new javax.swing.JTextField();
        tfZip = new javax.swing.JTextField();
        btnDeleteCommunity = new javax.swing.JButton();
        btnEditCommunity = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        lbGotoHouse = new javax.swing.JLabel();
        lbGoToHospital = new javax.swing.JLabel();
        tfChoosedCommunity = new javax.swing.JLabel();
        btnAddCommunity = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblHouse = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        btnDeleteHouse = new javax.swing.JButton();
        btnEditHouse = new javax.swing.JButton();
        btnDeletePerson = new javax.swing.JButton();
        btnEditPerson = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        tfOwner = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        tfHouse = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tfPerson = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblHospital = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctor = new javax.swing.JTable();
        tfHospital = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btnHospitalDelete = new javax.swing.JButton();
        btnHospitalEdit = new javax.swing.JButton();
        tfDoctor = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        btnDeleteDoctor = new javax.swing.JButton();
        btnEditDoctor = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        tfPatient = new javax.swing.JTextField();
        btnDeletePatient = new javax.swing.JButton();
        btnEditPatient = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblAppointment = new javax.swing.JTable();
        tfADate = new javax.swing.JTextField();
        cbACheck = new javax.swing.JComboBox<>();
        btnADelete = new javax.swing.JButton();
        btnAEdit = new javax.swing.JButton();
        cbDoctor = new javax.swing.JComboBox<>();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblEncounter = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        lbEncounter = new javax.swing.JTextArea();
        lbEncounterHeartrate = new javax.swing.JTextField();
        lbencountertime = new javax.swing.JTextField();
        lbEncounterBloodPressure = new javax.swing.JTextField();
        btnEDelete = new javax.swing.JButton();
        btnAEdit1 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        tfAccount = new javax.swing.JTextField();
        tfPassword = new javax.swing.JTextField();
        cbType = new javax.swing.JComboBox<>();
        tfPersonName = new javax.swing.JTextField();
        dcDOB = new com.toedter.calendar.JDateChooser();
        jScrollPane14 = new javax.swing.JScrollPane();
        tableAllPerson = new javax.swing.JTable();
        btnAllpersonEdit = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lbLogout = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(189, 212, 231));

        jPanel1.setBackground(new java.awt.Color(189, 212, 231));

        tblCommunity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "address", "zip"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCommunity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCommunityMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCommunity);

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("City");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Community");

        tblCity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCity.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCityMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblCity);

        tfCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel3.setText("City");

        btnEditCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnEditCity.setText("Edit");
        btnEditCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCityActionPerformed(evt);
            }
        });

        btnDeleteCity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnDeleteCity.setText("Delete");
        btnDeleteCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCityActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel4.setText("You already choosed:");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel5.setText("zip");

        tfAddress.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        tfZip.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tfZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfZipActionPerformed(evt);
            }
        });

        btnDeleteCommunity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnDeleteCommunity.setText("Delete");
        btnDeleteCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCommunityActionPerformed(evt);
            }
        });

        btnEditCommunity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnEditCommunity.setText("Edit");
        btnEditCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCommunityActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel9.setText("Address");

        lbGotoHouse.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        lbGotoHouse.setForeground(new java.awt.Color(153, 0, 51));
        lbGotoHouse.setText("go to House & Person >>>");
        lbGotoHouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGotoHouseMouseClicked(evt);
            }
        });

        lbGoToHospital.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        lbGoToHospital.setForeground(new java.awt.Color(153, 0, 51));
        lbGoToHospital.setText("go to Hospital & Doctor >>>");
        lbGoToHospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbGoToHospitalMouseClicked(evt);
            }
        });

        tfChoosedCommunity.setFont(new java.awt.Font("Helvetica Neue", 3, 14)); // NOI18N
        tfChoosedCommunity.setText("                             ");

        btnAddCommunity.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnAddCommunity.setText("Add");
        btnAddCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCommunityActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Helvetica Neue", 3, 12)); // NOI18N
        jLabel10.setText("tip: You need choose a community before go to House & Person or Hospital & Doctor page");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addGap(18, 18, 18)
                                                .addComponent(tfChoosedCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel2))
                                .addGap(85, 85, 85)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnDeleteCommunity)
                                        .addGap(60, 60, 60)
                                        .addComponent(btnEditCommunity)
                                        .addGap(46, 46, 46)
                                        .addComponent(btnAddCommunity))
                                    .addComponent(jButton1))
                                .addGap(208, 208, 208))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(btnDeleteCity)
                                            .addGap(30, 30, 30)
                                            .addComponent(btnEditCity))
                                        .addComponent(tfAddress)
                                        .addComponent(tfZip)
                                        .addComponent(tfCity)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(lbGotoHouse)
                                .addGap(128, 128, 128)
                                .addComponent(lbGoToHospital))
                            .addComponent(jLabel1))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel10)
                        .addGap(71, 71, 71)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteCity)
                            .addComponent(btnEditCity))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(tfZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(3, 3, 3)
                                .addComponent(jButton1)
                                .addGap(28, 28, 28)))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteCommunity)
                            .addComponent(btnEditCommunity)
                            .addComponent(btnAddCommunity))))
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(tfChoosedCommunity))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbGotoHouse)
                    .addComponent(lbGoToHospital))
                .addGap(42, 42, 42))
        );

        jTabbedPane1.addTab("City & Community", jPanel1);

        jPanel2.setBackground(new java.awt.Color(189, 212, 231));

        tblHouse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "House", "Owner"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHouse.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHouseMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblHouse);

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Person"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPerson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPersonMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblPerson);

        btnDeleteHouse.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnDeleteHouse.setText("Delete");
        btnDeleteHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteHouseActionPerformed(evt);
            }
        });

        btnEditHouse.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnEditHouse.setText("Edit");
        btnEditHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditHouseActionPerformed(evt);
            }
        });

        btnDeletePerson.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnDeletePerson.setText("Delete");
        btnDeletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePersonActionPerformed(evt);
            }
        });

        btnEditPerson.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnEditPerson.setText("Edit");
        btnEditPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPersonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel6.setText("House:");

        tfOwner.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tfOwner.setText("                             ");
        tfOwner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfOwnerActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel7.setText("Owner:");

        tfHouse.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tfHouse.setText("                             ");
        tfHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfHouseActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel8.setText("Person:");

        tfPerson.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        tfPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPersonActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton4.setText("Search");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton5.setText("Add");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel19.setText("Person");

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel20.setText("House");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addComponent(btnDeletePerson)
                                .addGap(48, 48, 48)
                                .addComponent(btnEditPerson))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(245, 245, 245)
                                        .addComponent(jButton4))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(tfHouse, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel2Layout.createSequentialGroup()
                                                .addComponent(tfOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(49, 49, 49)
                                                .addComponent(jButton3))))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(btnDeleteHouse)
                                        .addGap(51, 51, 51)
                                        .addComponent(btnEditHouse)
                                        .addGap(53, 53, 53)
                                        .addComponent(jButton2))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(332, 332, 332)
                                .addComponent(jButton5)))))
                .addContainerGap(243, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel20)
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jButton3)
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteHouse)
                            .addComponent(btnEditHouse)
                            .addComponent(jButton2)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tfOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(66, 66, 66)
                .addComponent(jLabel19)
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(tfPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4))
                        .addGap(82, 82, 82)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeletePerson)
                            .addComponent(btnEditPerson)
                            .addComponent(jButton5))))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("House & Person", jPanel2);

        jPanel3.setBackground(new java.awt.Color(189, 212, 231));

        tblHospital.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Hospital"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblHospital.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHospitalMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblHospital);

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Doctor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoctor);

        tfHospital.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel12.setText("Hospital");

        btnHospitalDelete.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnHospitalDelete.setText("Delete");
        btnHospitalDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHospitalDeleteActionPerformed(evt);
            }
        });

        btnHospitalEdit.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnHospitalEdit.setText("Edit and Save");
        btnHospitalEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHospitalEditActionPerformed(evt);
            }
        });

        tfDoctor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel13.setText("Doctor");

        btnDeleteDoctor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnDeleteDoctor.setText("Delete");
        btnDeleteDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteDoctorActionPerformed(evt);
            }
        });

        btnEditDoctor.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnEditDoctor.setText("Edit and Save");
        btnEditDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditDoctorActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton6.setText("Add");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton7.setText("Search");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton8.setText("Add");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jButton9.setText("Search");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel21.setText("Hospital");

        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel22.setText("Doctor");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jLabel21)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(btnHospitalDelete)
                                        .addGap(31, 31, 31)
                                        .addComponent(btnHospitalEdit))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(tfDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton9)
                                    .addComponent(jButton6)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(btnDeleteDoctor)
                                .addGap(48, 48, 48)
                                .addComponent(btnEditDoctor)
                                .addGap(31, 31, 31)
                                .addComponent(jButton8))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(jLabel12)
                                .addGap(18, 18, 18)
                                .addComponent(tfHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jButton7)))))
                .addContainerGap(221, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel21)
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jButton7))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnHospitalDelete)
                            .addComponent(btnHospitalEdit)
                            .addComponent(jButton6))))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel22)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13)
                            .addComponent(jButton9))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnDeleteDoctor)
                            .addComponent(btnEditDoctor)
                            .addComponent(jButton8))))
                .addContainerGap(139, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Hospital & Doctor", jPanel3);

        jPanel4.setBackground(new java.awt.Color(189, 212, 231));

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Patient"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblPatient);

        jLabel14.setText("Patient");

        tfPatient.setMinimumSize(new java.awt.Dimension(78, 23));
        tfPatient.setName(""); // NOI18N
        tfPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPatientActionPerformed(evt);
            }
        });

        btnDeletePatient.setText("Delete");
        btnDeletePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeletePatientActionPerformed(evt);
            }
        });

        btnEditPatient.setText("Edit and Save");
        btnEditPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditPatientActionPerformed(evt);
            }
        });

        tblAppointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor", "Date&Time", "Checked"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAppointment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAppointmentMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(tblAppointment);

        cbACheck.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "uncheck", "checked" }));

        btnADelete.setText("Delete");
        btnADelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnADeleteActionPerformed(evt);
            }
        });

        btnAEdit.setText("Edit and Save");
        btnAEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAEditActionPerformed(evt);
            }
        });

        cbDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "doctor2", "doctor1" }));

        tblEncounter.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Time", "Bloodpressure", "Heartrate", "Encounter"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblEncounter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEncounterMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tblEncounter);

        jLabel15.setText("Timestamp");

        jLabel16.setText("Blood pressure");

        jLabel17.setText("Heart rate");

        jLabel18.setText("Encounter");

        lbEncounter.setColumns(20);
        lbEncounter.setLineWrap(true);
        lbEncounter.setRows(5);
        jScrollPane10.setViewportView(lbEncounter);

        lbEncounterHeartrate.setText("                      ");

        lbencountertime.setText("                      ");

        lbEncounterBloodPressure.setText("                      ");

        btnEDelete.setText("Delete");
        btnEDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEDeleteActionPerformed(evt);
            }
        });

        btnAEdit1.setText("Edit and Save");
        btnAEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAEdit1ActionPerformed(evt);
            }
        });

        jButton10.setText("Search");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Add");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("Search");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Add");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Add");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Search");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel23.setText("Appointment");

        jLabel24.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel24.setText("Patient");

        jLabel25.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel25.setText("Encounter");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(855, 855, 855)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAEdit1)
                            .addComponent(btnEDelete)
                            .addComponent(jButton14)
                            .addComponent(jButton15)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDeletePatient)
                                    .addComponent(btnEditPatient)
                                    .addComponent(jButton10)
                                    .addComponent(jButton11)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tfPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel24))
                        .addGap(44, 44, 44)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(tfADate)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(cbACheck, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jButton12))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addComponent(jButton13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                        .addComponent(btnADelete)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnAEdit))))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel25)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel17)
                                            .addComponent(jLabel16)
                                            .addComponent(jLabel15)
                                            .addComponent(jLabel18))
                                        .addGap(26, 26, 26)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lbencountertime, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                            .addComponent(lbEncounterBloodPressure)
                                            .addComponent(lbEncounterHeartrate))))))))
                .addGap(28, 28, 28))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel23)
                    .addComponent(jLabel24))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(5, 5, 5)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(tfADate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton12))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(cbACheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(24, 24, 24)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton13)
                                        .addComponent(btnAEdit)
                                        .addComponent(btnADelete)))
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(tfPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton10)
                        .addGap(11, 11, 11)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeletePatient)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditPatient)))
                .addGap(52, 52, 52)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lbencountertime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(lbEncounterBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(14, 14, 14)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(lbEncounterHeartrate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addComponent(jLabel18))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jButton15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnAEdit1)
                                .addGap(18, 18, 18)
                                .addComponent(jButton14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Patient & Appointment & Encounter", jPanel4);

        jPanel5.setBackground(new java.awt.Color(189, 212, 231));

        tfAccount.setText("                                 ");

        tfPassword.setText("                                 ");
        tfPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPasswordActionPerformed(evt);
            }
        });

        cbType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "patient", "doctor", "communityAdmin" }));

        tfPersonName.setText(" ");

        tableAllPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Name", "Account"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAllPerson.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableAllPersonMouseClicked(evt);
            }
        });
        jScrollPane14.setViewportView(tableAllPerson);

        btnAllpersonEdit.setText("Edit");
        btnAllpersonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllpersonEditActionPerformed(evt);
            }
        });

        jButton16.setText("Delete");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Add");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setText("Search");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel11.setText("Account");

        jLabel26.setText("DOB");

        jLabel27.setText("Password");

        jLabel28.setText("Type");

        jLabel29.setText("Name");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel27)
                        .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel29, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel28))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfPersonName)
                            .addComponent(tfAccount)
                            .addComponent(tfPassword)
                            .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(64, 64, 64)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAllpersonEdit)
                            .addComponent(jButton16)
                            .addComponent(jButton17)
                            .addComponent(jButton18, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addComponent(dcDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(351, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton18)
                            .addComponent(jLabel11))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton17)
                            .addComponent(jLabel27))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cbType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28))
                                .addGap(27, 27, 27)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tfPersonName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jButton16)
                                .addGap(30, 30, 30)
                                .addComponent(btnAllpersonEdit)))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dcDOB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)))
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(228, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Person", jPanel5);

        lbLogout.setText("Logout");
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbLogoutMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbLogout)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbLogout)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCityMouseClicked
        int selectedRowIndex = tblCity.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCity.getModel();
        selectedCity = (City)model.getValueAt(selectedRowIndex, 0);
        populateCommunityTable(selectedCity);
        communityTableRowSorter = new TableRowSorter(communityModel);
        tblCommunity.setRowSorter(communityTableRowSorter);
        tfCity.setText(selectedCity.getName());
        
    }//GEN-LAST:event_tblCityMouseClicked

    private void tfZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfZipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfZipActionPerformed

    private void btnDeleteCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCityActionPerformed
        if(selectedCity != null){
            AllSystem.cities.remove(selectedCity);
                    JOptionPane.showMessageDialog(this, "City removed");
            populateCityList();
        } else {
                    JOptionPane.showMessageDialog(this, "Please choose the item");

        }
    }//GEN-LAST:event_btnDeleteCityActionPerformed

    private void btnEditCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCityActionPerformed
        if(selectedCity != null){
            String cityName = tfCity.getText();
            selectedCity.setName(cityName);
                    JOptionPane.showMessageDialog(this, "City edited");
                    populateCityList();

        } else {
                    JOptionPane.showMessageDialog(this, "Please choose the item");

        }
    }//GEN-LAST:event_btnEditCityActionPerformed

    private void btnDeleteCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCommunityActionPerformed
        if(selectedCommunity != null){
            selectedCity.getCommunities().remove(selectedCommunity);
                    JOptionPane.showMessageDialog(this, "Community removed");
            populateCommunityTable(selectedCity);
        } else {
                    JOptionPane.showMessageDialog(this, "Please choose the item");

        }
    }//GEN-LAST:event_btnDeleteCommunityActionPerformed

    private void tblCommunityMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCommunityMouseClicked
        int selectedRowIndex = tblCommunity.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to view");
            return;
        }
        communityModel = (DefaultTableModel) tblCommunity.getModel();
        selectedCommunity = (Community)communityModel.getValueAt(tblCommunity.convertRowIndexToModel(selectedRowIndex), 0);
        
        
        
        tfAddress.setText(selectedCommunity.getAddress());
        tfZip.setText(String.valueOf(selectedCommunity.getZip()));
        tfChoosedCommunity.setText(selectedCommunity.getAddress());
    }//GEN-LAST:event_tblCommunityMouseClicked

    private void btnEditCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCommunityActionPerformed
        if(selectedCommunity != null){
            String address = tfAddress.getText();
            String zip = tfZip.getText();
            selectedCommunity.setAddress(address);
            selectedCommunity.setZip(Integer.valueOf(zip));
                    JOptionPane.showMessageDialog(this, "Community edited");
                  populateCommunityTable(selectedCity);

        } else {
                    JOptionPane.showMessageDialog(this, "Please choose the item");

        }
    }//GEN-LAST:event_btnEditCommunityActionPerformed

    private void tblHouseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHouseMouseClicked
        try{
            int selectedRowIndex = tblHouse.getSelectedRow();

        houeseModel = (DefaultTableModel) tblHouse.getModel();
        selectedHouse = (House)houeseModel.getValueAt(tblHouse.convertRowIndexToModel(selectedRowIndex), 0);
        tfHouse.setText(selectedHouse.getAddress());
        tfOwner.setText(selectedHouse.getOwner());
        
        populatePersonTable(selectedHouse);
        personTableRowSorter = new TableRowSorter(personmodel);
 tblPerson.setRowSorter(personTableRowSorter);
            
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please go to City&Community page and select a community");
        }
        
        
        
    }//GEN-LAST:event_tblHouseMouseClicked

    private void tblPersonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPersonMouseClicked
        int selectedRowIndex = tblPerson.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblPerson.getModel();
        selectedPerson= (Person)model.getValueAt(tblPerson.convertRowIndexToModel(selectedRowIndex), 0);
        tfPerson.setText(selectedPerson.getName());
    }//GEN-LAST:event_tblPersonMouseClicked

    private void btnDeleteHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteHouseActionPerformed
        try{
            if(selectedCommunity != null){
            selectedCommunity.getHouses().remove(selectedHouse);
           
            JOptionPane.showMessageDialog(this, "House removed");
            populateHouseTable(selectedCommunity);
            clearTable(tblPerson);
            
        } else{
            JOptionPane.showMessageDialog(this, "Please choose the item");

        }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please go to City&Community page and select a community");
        }
        
    }//GEN-LAST:event_btnDeleteHouseActionPerformed

    private void btnEditHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditHouseActionPerformed
        
        try{
            String house = tfHouse.getText();
        String owner = tfOwner.getText();
        selectedHouse.setAddress(house);
        selectedHouse.setOwner(owner);
        populateHouseTable(selectedCommunity);
        JOptionPane.showMessageDialog(this, "House edited");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please go to City&Community page and select a community");
        }
        
    }//GEN-LAST:event_btnEditHouseActionPerformed

    private void btnDeletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePersonActionPerformed
        try{
            selectedHouse.getPersons().remove(selectedPerson);
        populatePersonTable(selectedHouse);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please select a house");
        }
        
    }//GEN-LAST:event_btnDeletePersonActionPerformed

    private void btnEditPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPersonActionPerformed
        try{
             selectedPerson.setName(tfPerson.getText());
        populatePersonTable(selectedHouse);
        JOptionPane.showMessageDialog(this, "Person edited");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a house");
        }
       
    }//GEN-LAST:event_btnEditPersonActionPerformed

    private void tfOwnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfOwnerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfOwnerActionPerformed

    private void tfHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfHouseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfHouseActionPerformed

    private void tfPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPersonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPersonActionPerformed

    private void lbGoToHospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGoToHospitalMouseClicked
        System.out.print("tabbed pane");
        jTabbedPane1.setSelectedIndex(2);
        populateHospitalTable(selectedCommunity);
        hospitalTableRowSorter = new TableRowSorter(hospitalModel);
 tblHospital.setRowSorter(hospitalTableRowSorter);

        
    }//GEN-LAST:event_lbGoToHospitalMouseClicked

    private void lbGotoHouseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbGotoHouseMouseClicked
        jTabbedPane1.setSelectedIndex(1);
        populateHouseTable(selectedCommunity);
        houseRowSorter = new TableRowSorter(houeseModel);
 tblHouse.setRowSorter(houseRowSorter);
    }//GEN-LAST:event_lbGotoHouseMouseClicked

    private void tblHospitalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHospitalMouseClicked
        int selectedRowIndex = tblHospital.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblHospital.getModel();
        selectedHospital= (Hospital)model.getValueAt(tblHospital.convertRowIndexToModel(selectedRowIndex), 0);
        tfHospital.setText(selectedHospital.getName());
        populateDoctorTable(selectedHospital);
        tableRowSorterDocor = new TableRowSorter(modelDoctor);
 tblDoctor.setRowSorter(tableRowSorterDocor);

        
    }//GEN-LAST:event_tblHospitalMouseClicked

    private void btnHospitalDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHospitalDeleteActionPerformed
        try{
            selectedCommunity.getHospitalDirectory().getHospitalDirectory().remove(selectedHospital);
        populateHospitalTable(selectedCommunity);
        JOptionPane.showMessageDialog(this, "Hospital removed");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please go to City&Community page and select a community");
        }

        
    }//GEN-LAST:event_btnHospitalDeleteActionPerformed

    private void btnHospitalEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHospitalEditActionPerformed
        try{
            String hospital = tfHospital.getText();
        selectedHospital.setName(hospital);
        populateHospitalTable(selectedCommunity);
                JOptionPane.showMessageDialog(this, "Hospital edited");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please go to City&Community page and select a community");
        }
        
                

    }//GEN-LAST:event_btnHospitalEditActionPerformed

    private void tblDoctorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorMouseClicked
        int selectedRowIndex = tblDoctor.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblDoctor.getModel();
        selectedDoctor = (Doctor) model.getValueAt(tblDoctor.convertRowIndexToModel(selectedRowIndex), 0);
        tfDoctor.setText(selectedDoctor.getPerson().getName());
    }//GEN-LAST:event_tblDoctorMouseClicked

    private void btnDeleteDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteDoctorActionPerformed
       try{
             selectedHospital.getDoctorDirectory().getDoctorDirectory().remove(selectedDoctor);
        populateDoctorTable(selectedHospital);
        JOptionPane.showMessageDialog(this, "Doctor removed");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a hospital");
        }
       
    }//GEN-LAST:event_btnDeleteDoctorActionPerformed

    private void btnEditDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditDoctorActionPerformed
        try{
            String doctorname = tfDoctor.getText();
        selectedDoctor.getPerson().setName(doctorname);
        populateDoctorTable(selectedHospital);
        JOptionPane.showMessageDialog(this, "Doctor edited");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a hospital");
        }
        
    }//GEN-LAST:event_btnEditDoctorActionPerformed

    private void tfPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPatientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPatientActionPerformed

    private void btnDeletePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeletePatientActionPerformed
        try{
            AllSystem.patientDirectory.getPatients().remove(selectedPatient);
        populatePatientTable();
        JOptionPane.showMessageDialog(this, "Patient removed");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select an item");
        }

        
    }//GEN-LAST:event_btnDeletePatientActionPerformed

    private void tblPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientMouseClicked
        int selectedRowIndex = tblPatient.getSelectedRow();
        
        selectedPatient = (Patient) modelPatient.getValueAt(tblPatient.convertRowIndexToModel(selectedRowIndex), 0);
        tfPatient.setText(selectedPatient.getPerson().getName());
        populateTableAppointment();
        tableRowSorterAppointment = new TableRowSorter(modelAppointment);
 tblAppointment.setRowSorter(tableRowSorterAppointment);
 
        populateHistoryTable();
        tableRowSorterEncounter = new TableRowSorter(modelEncounter);
 tblEncounter.setRowSorter(tableRowSorterEncounter);
    }//GEN-LAST:event_tblPatientMouseClicked

    private void btnEditPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditPatientActionPerformed
        String patient = tfPatient.getText();
        selectedPatient.getPerson().setName(patient);
        JOptionPane.showMessageDialog(this, "Patient name edited");
    }//GEN-LAST:event_btnEditPatientActionPerformed

    private void tblAppointmentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAppointmentMouseClicked
        int selectedRow = tblAppointment.getSelectedRow();
        modelAppointment = (DefaultTableModel) tblAppointment.getModel();
        selectedAppointment = (Appointment)modelAppointment.getValueAt(tblAppointment.convertRowIndexToModel(selectedRow), 0);
        cbDoctor.setSelectedItem(selectedAppointment.getDoctor().getPerson().getName());
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        tfADate.setText(formatter.format(selectedAppointment.getDate()));
        
        if (selectedAppointment.isState() == true){
            cbACheck.setSelectedIndex(1);
        } else {
            cbACheck.setSelectedIndex(0);
        }

    }//GEN-LAST:event_tblAppointmentMouseClicked

    private void btnAEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAEditActionPerformed
        if (String.valueOf(cbDoctor.getSelectedItem()).equals("doctor1")) {
            selectedAppointment.setDoctor(AllSystem.doctor1);
        } else {
            selectedAppointment.setDoctor(AllSystem.doctor2);
        }
        Date date1 = null;  
        try {
            date1 = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(tfADate.getText());
        } catch (ParseException ex) {
            Logger.getLogger(SystemAdminJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        selectedAppointment.setDate(date1);
        if (String.valueOf(cbACheck.getSelectedItem()).equals("checked")){
            selectedAppointment.setState(true);
        } else {
            selectedAppointment.setState(false);
        }
        
        populateTableAppointment();
       
        
        
    }//GEN-LAST:event_btnAEditActionPerformed

    private void btnADeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnADeleteActionPerformed
        AllSystem.appointments.remove(selectedAppointment);
        populateTableAppointment();
                JOptionPane.showMessageDialog(this, "Appointment removed");

        
    }//GEN-LAST:event_btnADeleteActionPerformed

    private void tblEncounterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEncounterMouseClicked
        int selectedRow = tblEncounter.getSelectedRow();
        modelEncounter = (DefaultTableModel) tblEncounter.getModel();
        selectedEncounter = (Encounter)modelEncounter.getValueAt(tblEncounter.convertRowIndexToModel(selectedRow), 0);
        formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        lbencountertime.setText(formatter.format(selectedEncounter.getTimestamp()));
        lbEncounterBloodPressure.setText(selectedEncounter.getVitalSigns().getBloodPressure());
        lbEncounterHeartrate.setText(selectedEncounter.getVitalSigns().getHeartRate());
        lbEncounter.setText(selectedEncounter.getEncounterText());
    }//GEN-LAST:event_tblEncounterMouseClicked

    private void btnEDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEDeleteActionPerformed
        selectedPatient.getEncounterDirectory().getEncounterDirectory().remove(selectedEncounter);
        populateHistoryTable();
        JOptionPane.showMessageDialog(this, "Encounter removed");
        
    }//GEN-LAST:event_btnEDeleteActionPerformed

    private void btnAEdit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAEdit1ActionPerformed
        selectedEncounter.setEncounterText(lbEncounter.getText());
        selectedEncounter.getVitalSigns().setBloodPressure(lbEncounterBloodPressure.getText());
        selectedEncounter.getVitalSigns().setHeartRate(lbEncounterHeartrate.getText());
        
        Date date2 = null;  
        try {
            date2 = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(lbencountertime.getText());
        } catch (ParseException ex) {
            Logger.getLogger(SystemAdminJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        selectedEncounter.setTimestamp(date2);
        
        populateHistoryTable();
        JOptionPane.showMessageDialog(this, "Encounter edited");
    }//GEN-LAST:event_btnAEdit1ActionPerformed

    private void tfPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPasswordActionPerformed

    private void tableAllPersonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableAllPersonMouseClicked
        int selectedRow = tableAllPerson.getSelectedRow();
        modelAllPerson = (DefaultTableModel) tableAllPerson.getModel();
        selectedUser = (Person)modelAllPerson.getValueAt(tableAllPerson.convertRowIndexToModel(selectedRow), 0);
        
        tfAccount.setText(selectedUser.getAccount());
        tfPassword.setText(selectedUser.getPassword());
        tfPersonName.setText(selectedUser.getName());
        if(selectedUser.getType().equals("doctor")){cbType.setSelectedIndex(1);}
        else if(selectedUser.getType().equals("patient")){cbType.setSelectedIndex(0);}
        else {cbType.setSelectedIndex(2);}
        try {
            dcDOB.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(selectedUser.getDOB()));
        } catch (ParseException ex) {
            Logger.getLogger(SystemAdminJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
       
        
    }//GEN-LAST:event_tableAllPersonMouseClicked

    private void btnAllpersonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllpersonEditActionPerformed
        try{
            boolean flag = true;
        
        //account
        String accountText = tfAccount.getText();
        if ((accountText == null) || (accountText.equals(""))) {flag = false; JOptionPane.showMessageDialog(this, "Please enter account");}

        for(Person person : AllSystem.persons) {
            if(accountText.equals(person.getAccount())) {
                flag = false;
                JOptionPane.showMessageDialog(this, "account already existed");
                break;
            }
        }
        if (flag) {
        String password = tfPassword.getText();
        String type = String.valueOf(cbType.getSelectedItem());
        formatter = new SimpleDateFormat("yyyy-MM-dd");  
        String date = formatter.format(dcDOB.getDate());
        String name = tfPersonName.getText();
        
        selectedUser.setAccount(accountText);
        selectedUser.setDOB(date);
        selectedUser.setPassword(password);
        selectedUser.setName(name);
        selectedUser.setType(type);
        populateAllPersonTable();
        JOptionPane.showMessageDialog(this, "Person edited");
        }
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select an item");
        }

        
       
    }//GEN-LAST:event_btnAllpersonEditActionPerformed

    private void btnAddCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCommunityActionPerformed
        try{
        Community community = new Community(tfAddress.getText(), Integer.valueOf(tfZip.getText()), new HospitalDirectory());
        selectedCity.getCommunities().add(community);
        JOptionPane.showMessageDialog(this, "new community added");
        populateCommunityTable(selectedCity);}
        catch(Exception e){
        JOptionPane.showMessageDialog(this, "zip must be a number");
        }
    }//GEN-LAST:event_btnAddCommunityActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            String text = tfAddress.getText();
        String zip = tfZip.getText();
        if(text.equals("")){
           text = zip;
        }
        if (text.trim().length() == 0) {
     communityTableRowSorter.setRowFilter(null);
  } else {
     communityTableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblAppointment.getRowSorter();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select an item");
        }

        

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            House house = new House(tfHouse.getText(), tfOwner.getText(),new ArrayList<>());
        selectedCommunity.getHouses().add(house);
        populateHouseTable(selectedCommunity);
        JOptionPane.showMessageDialog(this, "House added");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please go to City&Community page and select a community");
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
           String text = tfHouse.getText();
        if(text.equals("")){
           text = tfOwner.getText();
        }
        if (text.trim().length() == 0) {
     houseRowSorter.setRowFilter(null);
  } else {
     houseRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblHouse.getRowSorter(); 
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please go to City&Community page and select a community");
        }
        

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            Person person = new Person(tfPerson.getText());
        selectedHouse.getPersons().add(person);
        populatePersonTable(selectedHouse);
        JOptionPane.showMessageDialog(this, "person added");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a house");
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
            String text = tfPerson.getText();
        if (text.trim().length() == 0) {
     personTableRowSorter.setRowFilter(null);
  } else {
     personTableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblPerson.getRowSorter();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please select a house");
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
       try{
            Hospital hospital = new Hospital(tfHospital.getText(), new DoctorDirectory());
        selectedCommunity.getHospitalDirectory().getHospitalDirectory().add(hospital);
        populateHospitalTable(selectedCommunity);
        JOptionPane.showMessageDialog(this, "Hospital added");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please go to City&Community page and select a community");
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try{
             String text = tfHospital.getText();
        if (text.trim().length() == 0) {
     hospitalTableRowSorter.setRowFilter(null);
  } else {
     hospitalTableRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblHospital.getRowSorter();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please go to City&Community page and select a community");
        }
       

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try{
            Doctor doctor = new Doctor(new Person(tfDoctor.getText()));
        selectedHospital.getDoctorDirectory().getDoctorDirectory().add(doctor);
        populateDoctorTable(selectedHospital);
        populateAllPersonTable();
        JOptionPane.showMessageDialog(this, "doctor added");
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a hospital");
        }
        
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        try{
            String text = tfDoctor.getText();
        if (text.trim().length() == 0) {
     tableRowSorterDocor.setRowFilter(null);
  } else {
     tableRowSorterDocor.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblDoctor.getRowSorter();
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "Please select a hospital");
        }
        

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        if(tfPatient.getText().equals("")){
            JOptionPane.showConfirmDialog(this, "Please fill blank");
        } else {
        AllSystem.patientDirectory.getPatients().add(new Patient(new Person(tfPatient.getText()), new EncounterDirectory()));
        populatePatientTable();
        JOptionPane.showMessageDialog(this, "patient added");
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        String text = tfPatient.getText();
        if (text.trim().length() == 0) {
     tableRowSorterPatient.setRowFilter(null);
  } else {
     tableRowSorterPatient.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblPatient.getRowSorter();

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        Date date1 = null;
        try{
            date1 = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(tfADate.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please follow yyyy-MM-dd HH:mm format");
        }
        String d = String.valueOf(cbDoctor.getSelectedItem());
        Doctor doctor1 = null;
        for(Doctor doctor : AllSystem.doctors){
            if (doctor.getPerson().getName().equals(d)){
                doctor1 = doctor;
            }
        }
        String c = String.valueOf(cbACheck.getSelectedItem());
        boolean ch = false;
        if(c == "checked"){ ch = true; }
        Appointment appointment = new Appointment(date1, doctor1, selectedPatient, ch);
        AllSystem.appointments.add(appointment);
        populateTableAppointment();
        tableRowSorterAppointment = new TableRowSorter(modelAppointment);
 tblAppointment.setRowSorter(tableRowSorterAppointment);

        
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        String text = tfADate.getText();
        if (text.trim().length() == 0) {
     tableRowSorterAppointment.setRowFilter(null);
  } else {
     tableRowSorterAppointment.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblAppointment.getRowSorter();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        VitalSigns vitalSigns = new VitalSigns(lbEncounterBloodPressure.getText(), lbEncounterHeartrate.getText());
        String timestampt = lbencountertime.getText();
        Date timestamp = null;
        try{
            timestamp = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(timestampt);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, "please follow yyyy-MM-dd HH:mm format");
        }
        Encounter encounter = new Encounter(timestamp, lbEncounter.getText(), vitalSigns);
        selectedPatient.getEncounterDirectory().getEncounterDirectory().add(encounter);
        JOptionPane.showMessageDialog(this, "Encounter added");
        populateHistoryTable();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        String text = "";
        if(!lbencountertime.getText().equals("")){
            text = lbencountertime.getText();
        } else if(!lbEncounter.getText().equals("")){ text = lbencountertime.getText();
        } else if(!lbEncounterBloodPressure.equals("")){text = lbEncounterBloodPressure.getText();
        
        }else if (!lbEncounterHeartrate.equals("")) {text = lbEncounterHeartrate.getText();}
        if (text.trim().length() == 0) {
     tableRowSorterEncounter.setRowFilter(null);
  } else {
     tableRowSorterEncounter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tblEncounter.getRowSorter();

    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        AllSystem.persons.remove(selectedUser);
        populateAllPersonTable();
        JOptionPane.showMessageDialog(this, "Person deleted");
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        boolean flag = true;
        
        //account
        String accountText = tfAccount.getText();
        if ((accountText == null) || (accountText.equals(""))) {flag = false; JOptionPane.showMessageDialog(this, "Please enter account");}

        for(Person person : AllSystem.persons) {
            if(accountText.equals(person.getAccount())) {
                flag = false;
                JOptionPane.showMessageDialog(this, "account already existed");
                break;
            }
        }
        
        //psw
        String passwordText = tfPassword.getText();
        if ((passwordText == null) || (passwordText.equals(""))) {flag = false; JOptionPane.showMessageDialog(this, "Please enter password");}

        //type
        String type = String.valueOf(cbType.getSelectedItem());
        
        //name
        String name = tfPersonName.getText();
        if ((name == null) || (name.equals("")) || (!name.matches("^[a-zA-Z]*$"))) { flag = false; JOptionPane.showMessageDialog(this, "Please follow name format");}
        
        //dob
        String dob = null;
        SimpleDateFormat formatter;
        formatter = new SimpleDateFormat("yyyy-MM-dd");
        Date currentDate = new Date(); 
        if (dcDOB.getDate() == null){ flag = false; JOptionPane.showMessageDialog(this, "Please choose a property date");}
        else if (dcDOB.getDate().after(currentDate)) { flag = false; JOptionPane.showMessageDialog(this, "Please choose a property date");}
        else { dob = formatter.format(dcDOB.getDate());}
        

        
        
        if (flag) {
            Person newPerson = new Person(accountText, passwordText, type,name,dob);
            AllSystem.persons.add(newPerson);
            if(type.equals("patient")){
                AllSystem.patients.add(new Patient(newPerson, new EncounterDirectory()));
            } else if(type.equals("doctor")){
                AllSystem.doctors.add(new Doctor(newPerson));
            } else if(type.equals("communityAdmin")){
                AllSystem.communityAdmins.add(new CommunityAdmin(newPerson,AllSystem.community1));
            } 
            
            JOptionPane.showMessageDialog(this, "user added");
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
       String text = tfAccount.getText();
        if (text.trim().length() == 0) {
     tableRowSorterAllPerson.setRowFilter(null);
  } else {
     tableRowSorterAllPerson.setRowFilter(RowFilter.regexFilter("(?i)" + text));
  }
        tableAllPerson.getRowSorter();

    }//GEN-LAST:event_jButton18ActionPerformed

    private void lbLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMouseClicked
        LoginJframe loginJframe = new LoginJframe();
        loginJframe.setVisible(true);
        super.dispose();

    }//GEN-LAST:event_lbLogoutMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemAdminJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemAdminJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemAdminJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemAdminJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SystemAdminJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnADelete;
    private javax.swing.JButton btnAEdit;
    private javax.swing.JButton btnAEdit1;
    private javax.swing.JButton btnAddCommunity;
    private javax.swing.JButton btnAllpersonEdit;
    private javax.swing.JButton btnDeleteCity;
    private javax.swing.JButton btnDeleteCommunity;
    private javax.swing.JButton btnDeleteDoctor;
    private javax.swing.JButton btnDeleteHouse;
    private javax.swing.JButton btnDeletePatient;
    private javax.swing.JButton btnDeletePerson;
    private javax.swing.JButton btnEDelete;
    private javax.swing.JButton btnEditCity;
    private javax.swing.JButton btnEditCommunity;
    private javax.swing.JButton btnEditDoctor;
    private javax.swing.JButton btnEditHouse;
    private javax.swing.JButton btnEditPatient;
    private javax.swing.JButton btnEditPerson;
    private javax.swing.JButton btnHospitalDelete;
    private javax.swing.JButton btnHospitalEdit;
    private javax.swing.JComboBox<String> cbACheck;
    private javax.swing.JComboBox<String> cbDoctor;
    private javax.swing.JComboBox<String> cbType;
    private com.toedter.calendar.JDateChooser dcDOB;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea lbEncounter;
    private javax.swing.JTextField lbEncounterBloodPressure;
    private javax.swing.JTextField lbEncounterHeartrate;
    private javax.swing.JLabel lbGoToHospital;
    private javax.swing.JLabel lbGotoHouse;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JTextField lbencountertime;
    private javax.swing.JTable tableAllPerson;
    private javax.swing.JTable tblAppointment;
    private javax.swing.JTable tblCity;
    private javax.swing.JTable tblCommunity;
    private javax.swing.JTable tblDoctor;
    private javax.swing.JTable tblEncounter;
    private javax.swing.JTable tblHospital;
    private javax.swing.JTable tblHouse;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTable tblPerson;
    private javax.swing.JTextField tfADate;
    private javax.swing.JTextField tfAccount;
    private javax.swing.JTextField tfAddress;
    private javax.swing.JLabel tfChoosedCommunity;
    private javax.swing.JTextField tfCity;
    private javax.swing.JTextField tfDoctor;
    private javax.swing.JTextField tfHospital;
    private javax.swing.JTextField tfHouse;
    private javax.swing.JTextField tfOwner;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfPatient;
    private javax.swing.JTextField tfPerson;
    private javax.swing.JTextField tfPersonName;
    private javax.swing.JTextField tfZip;
    // End of variables declaration//GEN-END:variables


    public void populateCityList(){
       DefaultTableModel model = (DefaultTableModel)tblCity.getModel();
       model.setRowCount(0);
       for(City city : AllSystem.cities){
           Object[] row = new Object[1];
           row[0] = city;
           model.addRow(row);
       }
         
    }
    
    public void populateCommunityTable(City city) {
       communityModel = (DefaultTableModel)tblCommunity.getModel();
       communityModel.setRowCount(0);
       for(Community community : city.getCommunities()){
           Object[] row = new Object[2];
           row[0] = community;
           row[1] = community.getZip();
           communityModel.addRow(row);
       }
    }
    
    public void populateHouseTable(Community community) {
       houeseModel = (DefaultTableModel)tblHouse.getModel();
       houeseModel.setRowCount(0);
       for(House house: community.getHouses()){
           Object[] row = new Object[2];
           row[0] = house;
           row[1] = house.getOwner();
           houeseModel.addRow(row);
       }
    }
    
    private void populatePersonTable(House selectedHouse) {
       personmodel = (DefaultTableModel)tblPerson.getModel();
       personmodel.setRowCount(0);
       for(Person person: selectedHouse.getPersons()){
           Object[] row = new Object[1];
           row[0] = person;
//           row[2] = person.getDOB();
//           row[1] = person.getId();
           personmodel.addRow(row);
       }
    }
    
    private void populateAllPersonTable() {
       modelAllPerson= (DefaultTableModel)tableAllPerson.getModel();
       modelAllPerson.setRowCount(0);
       for(Person person: AllSystem.persons){
           Object[] row = new Object[2];
           row[0] = person;
           row[1] = person.getAccount();
           modelAllPerson.addRow(row);
       }
    }
    
    public void populateHospitalTable(Community community) {
       if (community != null){
       hospitalModel = (DefaultTableModel)tblHospital.getModel();
       hospitalModel.setRowCount(0);
       for(Hospital hospital: community.getHospitalDirectory().getHospitalDirectory()){
           Object[] row = new Object[1];
           row[0] = hospital;          
           hospitalModel.addRow(row);
       }
       } else {JOptionPane.showMessageDialog(this, "please choose community first");
    }
    }

    public void populateDoctorTable(Hospital hospital) {
       modelDoctor = (DefaultTableModel)tblDoctor.getModel();
       modelDoctor.setRowCount(0);
       for(Doctor doctor: hospital.getDoctorDirectory().getDoctorDirectory()){
           Object[] row = new Object[1];
           row[0] = doctor;          
           modelDoctor.addRow(row);
       }
    }
    
   
    
    
    public void populatePatientTable() {
                modelPatient = (DefaultTableModel)tblPatient.getModel();
        modelPatient.setRowCount(0);
        for(Patient patient : AllSystem.patients) {
            Object[] row = new Object[1];
            row[0] = patient;
            modelPatient.addRow(row);
        }
    }
    
    
    
    private void populateTableAppointment() {
    modelAppointment = (DefaultTableModel)tblAppointment.getModel();
    modelAppointment.setRowCount(0);
    for(Appointment appointment : AllSystem.appointments){
        if(appointment.getPatient() == selectedPatient){
            Object[] row = new Object[3];
            row[0] = appointment;
//            formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
            row[1] = formatter.format(appointment.getDate());
            row[2] = appointment.isState();
            modelAppointment.addRow(row);
        }
    }
    
}
    
    
    
    
//    public City setComboboxCity() {      
//                String[] array = new String[AllSystem.cities.size()];
//                for(int i = 0; i < array.length; i++) {
//                    array[i] = AllSystem.cities.get(i).getName();
//                }
//                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( array);
//                cbCity.setModel( model );  
//                
//                
//                String cityText = String.valueOf(cbCity.getSelectedItem());
//                selectedCity = null;
//        for (City city: cities) {
//            
//            if (cityText.equals(city.getName())){
//                selectedCity = city;
//            }
//        }
//        return selectedCity;
//    }
    
//    public Community setComboboxCommunity(City selectedCity) {
//        
//                ArrayList<Community> communities= selectedCity.getCommunities();
//                String[] array = new String[communities.size()];
//                for(int i = 0; i < array.length; i++) {
//                    array[i] = communities.get(i).getAddress();
//                }
////                        System.out.print(array[0]);
//
//                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( array);
//                cbCommunity.setModel( model );    
//    
//                
//            String communityText = String.valueOf(cbCommunity.getSelectedItem());
//                selectedCommunity = null;
//            for (Community community: communities) {
//            
//            if (communityText.equals(community.getAddress())){
//                selectedCommunity = community;
//            }
//        }
//        return selectedCommunity;
//}
    
    public void clearTable(JTable table){
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        dtm.setRowCount(0);
    }
    
    
//    public void setCbCommunity(){
//        for (City city: cities) {
//            String cityText = String.valueOf(cbCity.getSelectedItem());
//            if (cityText.equals(city.getName())){
//                communities = city.getCommunities();
//                String[] array = new String[communities.size()];
//                for(int i = 0; i < array.length; i++) {
//                    array[i] = communities.get(i).getAddress();
//                }
//                DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>( array);
//                cbCommunity.setModel( model );      
//        }
//            
//        }
//    }

    private void populateHistoryTable() {
        modelEncounter= (DefaultTableModel) tblEncounter.getModel();
        modelEncounter.setRowCount(0);
       
        for (Encounter encounter : selectedPatient.getEncounterDirectory().getEncounterDirectory()) {
            Object[] row = new Object[4];
            row[0] = encounter;
            
            row[1] = encounter.getVitalSigns().getBloodPressure();
            row[2] = encounter.getVitalSigns().getHeartRate();
            row[3] = encounter.getEncounterText();
            modelEncounter.addRow(row);
        
    }
    }
    
}
